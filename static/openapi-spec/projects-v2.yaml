openapi: 3.0.0
info:
  version: '2.0'
  title: projects-api
  termsOfService: https://www.mendix.com/terms-of-use/
  description: Projects API
  contact:
    name: Mendix Support
    url: 'https://support.mendix.com'
    email: support@mendix.com
servers:
  - url: 'https://projects-api.home.mendix.com/v2'
paths:
  '/projects':
    get:
      tags:
        - Projects
      summary: Get projects
      description: 'Returns a list of projects, according to the userâ€™s authorisation within the Developer Portal.'
      operationId: get-projects
      parameters:
        - name: limit
          in: query
          description: The maximum number of items to be returned per request. The default and maximum value is 100.
          schema:
            type: integer
        - name: offset
          in: query
          description: The offset is the zero-based index of the first project to be returned on the page. The default value is 0.
          schema:
            type: integer
        - name: createdSince
          in: query
          description: 'Retrieve all projects created after this date. Time is in UTC and must be provided in this format: 2020-01-16T05:53:28Z'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ProjectsResponse'
        '400':
          $ref: '#/components/responses/Http400'
        '401':
          $ref: '#/components/responses/Http401'
        '403':
          $ref: '#/components/responses/Http403'
        '500':
          $ref: '#/components/responses/Http500'
      security:
        - PersonalAccessTokenMxAppMetadataRead: []
    post:
      tags:
        - Projects
      summary: Post a project
      description:  Schedules a job on the server to create a project. The job will be handled asynchronously; the operation returns a jobId that can be used to monitor the status of the process.
      operationId: post-project
      requestBody:
        $ref: '#/components/requestBodies/Project'
      responses:
        '202':
          $ref: '#/components/responses/ProjectJobIdResponse'
        '400':
          $ref: '#/components/responses/Http400'
        '401':
          $ref: '#/components/responses/Http401'
        '500':
          $ref: '#/components/responses/Http500'
      security:
        - PersonalAccessTokenMxAppCreate: []
  '/projects/{project-id}':
    delete:
      tags:
        - Projects
      summary: Delete a project
      description: 'Deletes a project, its repository, cloud resources, and all collaboration data. A project cannot be deleted if it is attached to a licensed node or if it is hosted in a non-public Mendix cloud.'
      operationId: delete-project
      parameters:
        - name: project-id
          in: path
          description: The unique id of the project
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '401':
          $ref: '#/components/responses/Http401'
        '404':
          $ref: '#/components/responses/Http404'
        '409':
          $ref: '#/components/responses/Http409'
        '500':
          $ref: '#/components/responses/Http500'
      security:
      - PersonalAccessTokenMxAppDelete: []
  '/projects/{project-id}/members':
    get:
      tags:
        - Members
        - Projects
      summary: Get project members
      description: 'Returns a list of team members of the project.'
      operationId: get-project-members
      parameters:
        - name: offset
          in: query
          description: 'The offset is the zero-based index of the first project to be returned on the page, and must be a positive value. The default value is 0.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of items to be returned per request. The default and maximum value is 100.
          schema:
            type: string
        - name: project-id
          in: path
          description: The unique id of the project
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ProjectMembersResponse'
        '400':
          $ref: '#/components/responses/Http400'
        '401':
          $ref: '#/components/responses/Http401'
        '403':
          $ref: '#/components/responses/Http403'
        '404':
          $ref: '#/components/responses/Http404'
        '500':
          $ref: '#/components/responses/Http500'
      security:
        - PersonalAccessTokenMxAppMetadataRead: []
    post:
      tags:
        - Projects
        - Members
      summary: Post a project member
      description: 'Adds a team member to the project with a specific role. The user must be an active member of the platform and belong to the same company as the user requesting the change. If the company is not yet using centralised platform roles, only the Scrum Master role can be assigned.'
      operationId: post-project-member
      parameters:
        - name: project-id
          in: path
          description: The unique id of the project
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/ProjectMember'
      responses:
        '201':
          description: Accepted
        '400':
          $ref: '#/components/responses/Http400'
        '401':
          $ref: '#/components/responses/Http401'
        '404':
          $ref: '#/components/responses/Http404'
        '409':
          $ref: '#/components/responses/Http409'
        '500':
          $ref: '#/components/responses/Http500'
      security:
        - PersonalAccessTokenMxAppTeamWrite: []
  '/projects/{project-id}/members/{user-id}':
    delete:
      tags:
        - Projects
        - Members
      summary: Delete a project member
      description: 'Removes a user from a project. The user is not removed when they are the last Scrum Master of the project, the last member of the project, or the Technical Contact of a licensed app.'
      operationId: delete-project-member
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Http401'
        '404':
          $ref: '#/components/responses/Http404'
        '409':
          $ref: '#/components/responses/Http409'
        '500':
          $ref: '#/components/responses/Http500'
      security:
        - PersonalAccessTokenMxAppTeamWrite: []
  '/projects/jobs/{job-id}':
    get:
      tags:
        - Projects
      summary: Get the status of a job
      description: 'Returns the status of a job.'
      operationId: get-project-job
      parameters:
        - $ref: '#/components/parameters/job-id'
      responses:
        '200':
          $ref: '#/components/responses/ProjectJobResponse'
        '401':
          $ref: '#/components/responses/Http401'
        '404':
          $ref: '#/components/responses/Http404'
        '500':
          $ref: '#/components/responses/Http500'
      security:
        - PersonalAccessTokenMxAppCreate: []
tags:
  - name: Members
    description: 'Team members of a Project'
  - name: Projects
    description: 'Project of Mendix platform'
components:
  parameters:
    project-id:
      name: project-id
      in: path
      description: The unique id of the project
      required: true
      schema:
        type: string
    user-id:
      name: user-id
      in: path
      description: The unique id of the user
      required: true
      schema:
        type: string
    job-id:
      name: job-id
      in: path
      description: Identifier of a project creation job
      required: true
      schema:
        type: string
  requestBodies:
    ProjectMember:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              memberId:
                type: string
                description: Unique identifier of the member
              roleId:
                type: string
                description: Unique identifier of the role that will be assigned to the member
            x-examples:
              Example 1:
                memberId: d207ff9b-3603-4060-aa0a-62d5b264bac7
                roleId: fdea56de-3c79-48d9-93ff-61cbc736426c
          examples:
            Example 1:
              value:
                memberId: string
                roleId: string
    Project:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the project
                maxLength: 100
              summary:
                type: string
                description: Description of the project
                maxLength: 400
              image:
                type: string
                description: 'Base-64 encoded string of the project icon image. The file size is limited to 5MB, minimum of 200 x 200 px and amaximum of 400 x 400 px.'
              templateId:
                type: string
                description: 'Identifier of the template that the project will be copied from. If empty, the default template will be used.'
                format: uuid
                pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                maxLength: 36
            required:
              - name
            x-examples:
              Example 1:
                name: name
                summary: summary
                image: image
                templateId: templateId
          examples:
            Example 1:
              value:
                name: string
                summary: string
                image: string
                templateId: bbb9c2b3-18f3-43ab-b149-c0dabf946f4b
  securitySchemes:
    PersonalAccessTokenMxAppMetadataRead:
      type: apiKey
      description: "Based on MxToken JSON Web Tokens a `PERSONAL_ACCESS_TOKEN` with the `mx:app:metadata:read` scope."
      name: Authorization
      in: header
    PersonalAccessTokenMxAppCreate:
      type: apiKey
      description: "Based on MxToken JSON Web Tokens a `PERSONAL_ACCESS_TOKEN` with the `mx:app:create` scope."
      name: Authorization
      in: header
    PersonalAccessTokenMxAppDelete:
      type: apiKey
      description: "Based on MxToken JSON Web Tokens a `PERSONAL_ACCESS_TOKEN` with the `mx:app:delete` scope."
      name: Authorization
      in: header
    PersonalAccessTokenMxAppTeamWrite:
      type: apiKey
      description: "Based on MxToken JSON Web Tokens a `PERSONAL_ACCESS_TOKEN` with the `mx:app:team:write` scope."
      name: Authorization
      in: header
  responses:
    ProjectsResponse:
      description: List of projects
      content:
        application/json:
          schema:
            type: object
            properties:
              page:
                type: object
                description: 'Contains information about the current page, and total elements to be retrieved'
                properties:
                  totalElements:
                    type: integer
                    description: Total projects to be retrieved
                  offset:
                    type: integer
                    description: Offset used by the current request
                  elements:
                    type: integer
                    description: Amount of elements on the current page
              items:
                type: array
                description: Array of object type project.
                items:
                  type: object
                  properties:
                    projectId:
                      type: string
                      description: Unique identifier for projects on the Mendix platform.
                    name:
                      type: string
                      description: Name of the project.
                    description:
                      type: string
                      description: Description of the project.
                    logo:
                      type: string
                      description: URL of the project image/logo.
                    createdOn:
                      type: string
                      description: Date and time in UTC when the project was created.
                    active:
                      type: boolean
                      description: Indicates whether a project is active or not. Inactive projects will only be returned for company admins.
                    createdBy:
                      type: object
                      description: Contains information about the person that created this project.
                      properties:
                        userId:
                          type: string
                          description: ' Unique identifier for members on the Mendix platform.'
                        fullName:
                          type: string
                          description: Full name of the member.
            x-examples:
              Example 1:
                page:
                  totalElements: 101
                  offset: 0
                  elements: 100
                items:
                  - projectId: Unique UUID
                    name: Project Name
                    description: Project with a lovely description
                    logo: Image URL
                    createdOn: 'Jun 29, 2023 4:39 PM'
                    active: true
                    createdBy:
                      userId: Unique UUID
                      fullName: John Doe
          examples:
            Example 1:
              value:
                page:
                  totalElements: 0
                  offset: 0
                  elements: 0
                items:
                  - projectId: string
                    name: string
                    description: string
                    logo: string
                    createdOn: string
                    active: true
                    createdBy:
                      userId: string
                      fullName: string
    ProjectMembersResponse:
      description: List of project members
      content:
        application/json:
          schema:
            type: object
            properties:
              page:
                type: object
                description: 'Contains information about the current page, and total elements to be retrieved'
                properties:
                  totalElements:
                    type: integer
                    description: Total projects to be retrieved
                  offset:
                    type: integer
                    description: Offset used by the current request
                  elements:
                    type: integer
                    description: Amount of elements on the current page
              items:
                type: array
                description: Array of members that match path and query parameters and authorisation access
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      description: Unique identifier for the member on the Mendix platform
                    displayName:
                      type: string
                      description: Full name of the member.
                    avatarUrl:
                      type: string
                      description: URL of the avatar image of the member.
                    isActive:
                      type: boolean
                      description: Indicator of whether the member is an active member on the platform
                    company:
                      type: object
                      description: Contains information of the company to which the member belongs.
                      properties:
                        companyName:
                          type: string
                          description: Name of the company to which the member belongs.
            x-examples:
              Example 1:
                page:
                  totalElements: 101
                  offset: 0
                  elements: 100
                items:
                  - userId: UUID-v4
                    displayName: Joe Best
                    avatarUrl: 'https://etcetera'
                    isActive: true
                    company:
                      companyName: My Awesome Company Ltd.
          examples:
            Example 1:
              value:
                page:
                  totalElements: 0
                  offset: 0
                  elements: 0
                items:
                  - userId: string
                    displayName: string
                    avatarUrl: string
                    isActive: true
                    company:
                      companyName: string
    ProjectJobIdResponse:
      description: Accepted
      content:
        application/json:
          schema:
            type: object
            properties:
              jobId:
                type: string
                description: Unique identifier of the job that creates the project. Use this ID to query the status of the process.
                format: uuid
                pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                minLength: 36
                maxLength: 36
            x-examples:
              Example 1:
                jobId: jobId
          examples:
            Example 1:
              value:
                jobId: bbb9c2b3-18f3-43ab-b149-c0dabf946f4b
    ProjectJobResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: 'Status of the project creation job. This can be ''Scheduled'', ''Running'', ''Completed'' or ''Failed''.'
                maxLength: 200
              errorMessage:
                type: string
                description: Error message provided in case the job has failed
              projectId:
                type: string
                description: Identifier of the new created project
                format: uuid
                pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
                maxLength: 36
            x-examples:
              Example 1:
                status: String
                error_message: String
                project_id: String
          examples:
            Example 2:
              value:
                status: string
                errorMessage: string
                projectId: bbb9c2b3-18f3-43ab-b149-c0dabf946f4b
    Http400:
      description: '400 Bad Request'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                description: 'Detailed information on the error'
                properties:
                  message:
                    type: string
                    description: 'A short, human-readable title for the general error type'
                    default: 'Bad Request'
                  detail:
                    type: string
                    description: 'A human-readable description of the specific error'
                  code:
                    type: integer
                    description: 'HTTP status code'
                    default: 400
                  instance:
                    type: string
                    description: 'UUID of the request for troubleshooting purposes'
                  invalid-params:
                    type: array
                    description: 'A list of invalid parameters'
                    properties:
                      name:
                        type: string
                        description: 'Name of the attribute in error'
                        maxLength: 200
                      reason:
                        type: string
                        description: 'A human readable description of the error'
                        maxLength: 200
    Http401:
      description: '401 Unauthorized'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                description: 'Detailed information on the error'
                properties:
                  message:
                    type: string
                    description: 'A short, human-readable title for the general error type'
                    default: 'Unauthorized'
                  detail:
                    type: string
                    description: 'A human-readable description of the specific error'
                  code:
                    type: integer
                    description: 'HTTP status code'
                    default: 401
                  instance:
                    type: string
                    description: 'UUID of the request for troubleshooting purposes'
    Http403:
      description: '403 Forbidden'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                description: 'Detailed information on the error'
                properties:
                  message:
                    type: string
                    description: 'A short, human-readable title for the general error type'
                    default: 'Forbidden'
                  detail:
                    type: string
                    description: 'A human-readable description of the specific error'
                  code:
                    type: integer
                    description: 'HTTP status code'
                    default: 403
                  instance:
                    type: string
                    description: 'UUID of the request for troubleshooting purposes'
    Http404:
      description: '404 Not Found'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                description: 'Detailed information on the error'
                properties:
                  message:
                    type: string
                    description: 'A short, human-readable title for the general error type'
                    default: 'Not Found'
                  detail:
                    type: string
                    description: 'A human-readable description of the specific error'
                  code:
                    type: integer
                    description: 'HTTP status code'
                    default: 404
                  instance:
                    type: string
                    description: 'UUID of the request for troubleshooting purposes'
    Http409:
      description: '409 Conflict'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                description: 'Detailed information on the error'
                properties:
                  message:
                    type: string
                    description: 'A short, human-readable title for the general error type'
                    default: 'Conflict'
                  detail:
                    type: string
                    description: 'A human-readable description of the specific error'
                  code:
                    type: integer
                    description: 'HTTP status code'
                    default: 409
                  instance:
                    type: string
                    description: 'UUID of the request for troubleshooting purposes'
    Http500:
      description: '500 Internal Server Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                description: 'Detailed information on the error'
                properties:
                  message:
                    type: string
                    description: 'A short, human-readable title for the general error type'
                    default: 'Internal Server Error'
                  code:
                    type: integer
                    description: 'HTTP status code'
                    default: 500
                  instance:
                    type: string
                    description: 'UUID of the request for troubleshooting purposes'
